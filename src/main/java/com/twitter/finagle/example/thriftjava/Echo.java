/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.finagle.example.thriftjava;

import com.twitter.finagle.Filter;
import com.twitter.finagle.Service;
import com.twitter.finagle.SourcedException;
import com.twitter.finagle.service.ReqRep;
import com.twitter.finagle.service.ResponseClass;
import com.twitter.finagle.service.ResponseClassifier;
import com.twitter.finagle.stats.StatsReceiver;
import com.twitter.finagle.thrift.DeserializeCtx;
import com.twitter.finagle.thrift.ThriftClientRequest;
import com.twitter.finagle.thrift.ThriftServiceIface;
import com.twitter.scrooge.ThriftException;
import com.twitter.scrooge.ThriftMethod;
import com.twitter.scrooge.ThriftResponse;
import com.twitter.scrooge.ThriftService;
import com.twitter.scrooge.ThriftStruct;
import com.twitter.scrooge.ThriftStructCodec;
import com.twitter.scrooge.ThriftStructCodec3;
import com.twitter.scrooge.ToThriftService;
import com.twitter.util.ConstFuture;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.util.Future;
import com.twitter.util.Return;
import com.twitter.util.Throw;
import com.twitter.util.Try;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.TApplicationException;
import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TMessage;
import org.apache.thrift.protocol.TMessageType;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolFactory;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;
import org.apache.thrift.transport.TMemoryBuffer;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TTransport;

import scala.Function1;
import scala.Option;
import scala.PartialFunction;
import scala.collection.Iterable;
import scala.collection.convert.WrapAsJava$;
import scala.collection.convert.WrapAsScala$;
import scala.runtime.AbstractFunction1;
import scala.runtime.BoxedUnit;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

public class Echo {
  public interface FutureIface extends ThriftService {
    Future<String> ping(String message);
  }

  private static abstract class BaseServiceIface implements ToThriftService {
    private final com.twitter.finagle.Service<Ping.Args, Ping.Result> ping;

    private BaseServiceIface(com.twitter.finagle.Service<Ping.Args, Ping.Result> ping) {
      this.ping = ping;
    }
  }

  public static class ServiceIface extends BaseServiceIface {
    public ServiceIface(com.twitter.finagle.Service<Echo.Ping.Args, Echo.Ping.Result> ping) {
      super(ping);
    }
    @Override
    public ThriftService toThriftService() {
      return new MethodIface(this);
    }
  }

  public static class MethodIface implements FutureIface {
    private com.twitter.finagle.Service<Ping.Args, String> __ping_service;

    @SuppressWarnings("unchecked")
    public MethodIface(final BaseServiceIface serviceIface) {
      Filter filter = ThriftServiceIface.resultFilter(pingMethod);
      __ping_service = filter.andThen(new com.twitter.finagle.Service<Echo.Ping.Args, Echo.Ping.Result>() {
        // This service is only needed to adapte the types because of Scala types
        @Override
        public Future<Ping.Result> apply(Ping.Args request) {
          return serviceIface.ping.apply(request);
        }
      });
    }

    @Override
    public Future<String> ping(String message) {
      return __ping_service.apply(new Ping.Args(message));
    }
  }

  private static final Ping pingMethod = new Ping();

  public static class Ping implements ThriftMethod {
    public final static ArgsCodec argsCodec = new ArgsCodec();
    public final static ResultCodec resultCodec = new ResultCodec();
    private final static String name = "ping";
    private final static String serviceName = "Echo";

    public static class ArgsCodec extends ThriftStructCodec3<Args> {
      @Override
      public void encode(Args args, TProtocol oprot) throws TException {
        args.write(oprot);
      }

      @Override
      public Args decode(TProtocol iprot) throws TException {
        ping_args ping_args = new ping_args();
        ping_args.read(iprot);
        return new Args(ping_args.getMessage());
      }
    }

    public static class Args implements ThriftStruct {
      private final String message;

      public Args(String message) {
        this.message = message;
      }

      public String getMessage() {
        return message;
      }

      @Override
      public void write(TProtocol oprot) throws TException {
        new ping_args().setMessage(message).write(oprot);
      }
    }

    public static class ResultCodec extends ThriftStructCodec3<Result> {
      @Override
      public Result decode(TProtocol iprot) throws TException {
        ping_result ping_result = new ping_result();
        ping_result.read(iprot);
        return new Result(ping_result.getSuccess());
      }

      @Override
      public void encode(Result result, TProtocol oprot) throws TException {
        result.write(oprot);
      }
    }

    public static class Result implements ThriftStruct, ThriftResponse {
      private final Option<String> success;

      public Result(String message) {
        this.success = Option.<String>apply(message);
      }

      @Override
      public void write(TProtocol oprot) throws TException {
        new ping_result().setSuccess(success.get()).write(oprot);
      }

      @Override
      public Option successField() {
        return success;
      }

      @Override
      public Iterable<Option<ThriftException>> exceptionFields() {
        return WrapAsScala$.MODULE$.asScalaBuffer(new ArrayList<>());
      }

      @Override
      public Option<ThriftException> firstException() {
        for (Option<ThriftException> e : WrapAsJava$.MODULE$.asJavaCollection(exceptionFields())) {
          if (e.isDefined()) {
            return e;
          }
        }
        return Option.<ThriftException>apply(null);
      }
    }

    @Override
    public Object functionToService(Object f) {
      throw new UnsupportedOperationException();
    }

    @Override
    public Object serviceToFunction(Object svc) {
      throw new UnsupportedOperationException();
    }

    @Override
    public String name() {
      return name;
    }

    @Override
    public String serviceName() {
      return serviceName;
    }

    @Override
    public ThriftStructCodec3 argsCodec() {
      return argsCodec;
    }

    @Override
    public ThriftStructCodec3 responseCodec() {
      return resultCodec;
    }

    @Override
    public boolean oneway() {
      return false;
    }
  }

  public static class FinagledClient implements FutureIface {
    private final Service<ThriftClientRequest, byte[]> service;
    private final TProtocolFactory protocolFactory;
    private final String serviceName;
    private final StatsReceiver statsReceiver;
    private final PartialFunction<ReqRep, ResponseClass> responseClassifier;

    public FinagledClient(Service<ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory, String serviceName, StatsReceiver statsReceiver, PartialFunction<ReqRep, ResponseClass> responseClassifier) {
      this.service = service;
      this.protocolFactory = protocolFactory;
      this.serviceName = serviceName;
      this.statsReceiver = statsReceiver;
      this.responseClassifier = responseClassifier;
    }

    public ThriftClientRequest encodeRequest(String name, ThriftStruct args) throws TException {
      TMemoryBuffer buf = new TMemoryBuffer(512);
      TProtocol oprot_ = protocolFactory.getProtocol(buf);
      oprot_.writeMessageBegin(new TMessage(name, TMessageType.CALL, 0));
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      byte[] bytes = Arrays.copyOfRange(buf.getArray(), 0, buf.length());
      return new ThriftClientRequest(bytes, false);
    }

    protected <T extends ThriftStruct> T decodeResponse(byte[] resBytes, ThriftStructCodec<T> codec) throws TException {
      TProtocol iprot = protocolFactory.getProtocol(new TMemoryInputTransport(resBytes));
      TMessage msg = iprot.readMessageBegin();

      try {
        if (msg.type == TMessageType.EXCEPTION) {
          TApplicationException x = TApplicationException.read(iprot);
          iprot.readMessageEnd();
          throw x;
        }
        return codec.decode(iprot);
      } finally {
        iprot.readMessageEnd();
      }
    }

    @Override
    public Future<String> ping(String message) {
//      __stats_ping.RequestsCounter.incr()
      Ping.Args inputArgs = new Ping.Args(message);
      Function1<byte[], Try<String>> replyDeserializer = new AbstractFunction1<byte[], Try<String>>() {
        @Override
        public Try<String> apply(byte[] response) {
          try {
            Ping.Result result = decodeResponse(response, Ping.resultCodec);
            if(result.success.isDefined()) {
              return new Return<>(result.success.get());
            } else {
              return new Throw(missingResult("ping"));
            }
          } catch (TException e) {
            return new Throw(e);
          }
        }
      };

      DeserializeCtx<String> serdeCtx = new DeserializeCtx<>(inputArgs, replyDeserializer);
      ThriftClientRequest serialized;
      try {
        serialized = encodeRequest("ping", inputArgs);
      } catch (TException e) {
        throw new RuntimeException(e);
      }
      Future<String> flatMap = this.service.apply(serialized)
              .flatMap(new AbstractFunction1<byte[], Future<String>>() {
                @Override
                public Future<String> apply(byte[] response) {
                  return new ConstFuture<>(serdeCtx.deserialize(response));
                }
              });
      Future<String> respond = flatMap.respond(new AbstractFunction1<Try<String>, BoxedUnit>() {
        @Override
        public BoxedUnit apply(Try<String> response) {
          ResponseClass responseClass = responseClassifier.applyOrElse(
                  new ReqRep(inputArgs, (Try) response),
                  ResponseClassifier.Default());
          if (responseClass instanceof ResponseClass.Successful) {
//                  SuccessCounter.incr();
          } else if (responseClass instanceof ResponseClass.Failed) {
//                  __stats_ping.FailuresCounter.incr();
            if (response instanceof Throw) {
              setServiceName(((Throw) response).e());
//                    __stats_ping.FailuresScope.counter(Throwables.mkString(ex):_ *).incr();
            }
          }
          return null;
        }
      });
      return respond;
    }

    protected TApplicationException missingResult(String name) {
      return new TApplicationException(
              TApplicationException.MISSING_RESULT,
              name + " failed: unknown result");
    }

    protected Throwable setServiceName(Throwable ex) {
      if (this.serviceName != "" && ex instanceof SourcedException) {
        ((SourcedException) ex).serviceName_$eq(this.serviceName);
      }
      return ex;
    }
  }

  public static class FinagleService extends com.twitter.finagle.Service<byte[], byte[]> {
    private final FutureIface iface;
    private final TProtocolFactory protocolFactory;
    protected HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>> functionMap = new HashMap<String, Function2<TProtocol, Integer, Future<byte[]>>>();
    public FinagleService(final FutureIface iface, final TProtocolFactory protocolFactory) {
      this.iface = iface;
      this.protocolFactory = protocolFactory;
      functionMap.put("ping", new Function2<TProtocol, Integer, Future<byte[]>>() {
        public Future<byte[]> apply(final TProtocol iprot, final Integer seqid) {
          Ping.Args args;
          try {
            args = (Ping.Args) pingMethod.argsCodec().decode(iprot);
          } catch (TProtocolException e) {
            try {
              iprot.readMessageEnd();
              TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
              TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
              TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

              oprot.writeMessageBegin(new TMessage("ping", TMessageType.EXCEPTION, seqid));
              x.write(oprot);
              oprot.writeMessageEnd();
              oprot.getTransport().flush();
              byte[] buffer = Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length());
              return Future.value(buffer);
            } catch (Exception e1) {
              return Future.exception(e1);
            }
          } catch (Exception e) {
            return Future.exception(e);
          }

          try {
            iprot.readMessageEnd();
          } catch (Exception e) {
            return Future.exception(e);
          }
          Future<String> future;
          try {
            future = iface.ping(args.message);
          } catch (Exception e) {
            future = Future.exception(e);
          }

          try {
            return future.flatMap(new Function<String, Future<byte[]>>() {
              public Future<byte[]> apply(String value) {
                Ping.Result result = new Ping.Result(value);
                try {
                  TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
                  TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

                  oprot.writeMessageBegin(new TMessage(Ping.name, TMessageType.REPLY, seqid));
                  result.write(oprot);
                  oprot.writeMessageEnd();

                  return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
                } catch (Exception e) {
                  return Future.exception(e);
                }
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              public Future<byte[]> apply(Throwable t) {
                return Future.exception(t);
              }
            });
          } catch (Exception e) {
            return Future.exception(e);
          }
        }
      });
    }

    public Future<byte[]> apply(byte[] request) {
      TTransport inputTransport = new TMemoryInputTransport(request);
      TProtocol iprot = protocolFactory.getProtocol(inputTransport);

      TMessage msg;
      try {
        msg = iprot.readMessageBegin();
      } catch (Exception e) {
        return Future.exception(e);
      }

      Function2<TProtocol, Integer, Future<byte[]>> fn = functionMap.get(msg.name);
      if (fn == null) {
        try {
          TProtocolUtil.skip(iprot, TType.STRUCT);
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
          TMemoryBuffer memoryBuffer = new TMemoryBuffer(512);
          TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
          oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return Future.value(Arrays.copyOfRange(memoryBuffer.getArray(), 0, memoryBuffer.length()));
        } catch (Exception e) {
          return Future.exception(e);
        }
      }

      return fn.apply(iprot, msg.seqid);
    }
  }

  public static class ping_args implements TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ping_args");

  private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short)-1);


  public String message;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    MESSAGE((short)-1, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case -1: // MESSAGE
  	return MESSAGE;
        default:
  	return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE, new FieldMetaData("message", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
  }


  public ping_args() {
  }

  public ping_args(
    String message)
  {
    this();
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ping_args(ping_args other) {
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public ping_args deepCopy() {
    return new ping_args(this);
  }

  @java.lang.Override
  public void clear() {
    this.message = null;
  }

  public String getMessage() {
    return this.message;
  }

  public ping_args setMessage(String message) {
    this.message = message;

    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been asigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE:
      return getMessage();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ping_args)
      return this.equals((ping_args)that);
    return false;
  }

  public boolean equals(ping_args that) {
    if (that == null)
      return false;
    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @java.lang.Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_message = true && (isSetMessage());
    builder.append(present_message);
    if (present_message)
      builder.append(message);
    return builder.toHashCode();
  }

  public int compareTo(ping_args other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ping_args typedOther = (ping_args)other;

    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case -1: // MESSAGE
          if (field.type == TType.STRING) {
            this.message = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.message != null) {
      oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
      oprot.writeString(this.message);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ping_args(");
    boolean first = true;
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}


  public static class ping_result implements TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ping_result");

  private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);


  public String success;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SUCCESS((short)0, "success");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 0: // SUCCESS
  	return SUCCESS;
        default:
  	return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
  }


  public ping_result() {
  }

  public ping_result(
    String success)
  {
    this();
    this.success = success;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ping_result(ping_result other) {
    if (other.isSetSuccess()) {
      this.success = other.success;
    }
  }

  public ping_result deepCopy() {
    return new ping_result(this);
  }

  @java.lang.Override
  public void clear() {
    this.success = null;
  }

  public String getSuccess() {
    return this.success;
  }

  public ping_result setSuccess(String success) {
    this.success = success;

    return this;
  }

  public void unsetSuccess() {
    this.success = null;
  }

  /** Returns true if field success is set (has been asigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return this.success != null;
  }

  public void setSuccessIsSet(boolean value) {
    if (!value) {
      this.success = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((String)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUCCESS:
      return getSuccess();
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUCCESS:
      return isSetSuccess();
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ping_result)
      return this.equals((ping_result)that);
    return false;
  }

  public boolean equals(ping_result that) {
    if (that == null)
      return false;
    boolean this_present_success = true && this.isSetSuccess();
    boolean that_present_success = true && that.isSetSuccess();
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (!this.success.equals(that.success))
        return false;
    }

    return true;
  }

  @java.lang.Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_success = true && (isSetSuccess());
    builder.append(present_success);
    if (present_success)
      builder.append(success);
    return builder.toHashCode();
  }

  public int compareTo(ping_result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ping_result typedOther = (ping_result)other;

    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 0: // SUCCESS
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ping_result(");
    boolean first = true;
    sb.append("success:");
    if (this.success == null) {
      sb.append("null");
    } else {
      sb.append(this.success);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
}
